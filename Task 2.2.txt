#include <ArduinoMqttClient.h>
#include <WiFi.h>
#include <DFRobot_DHT11.h>
#include <ArduinoJson.h>

DFRobot_DHT11 DHT;
#define DHT11_PIN 5

char ssid[] = "Xiaomi13Ultra";
char pass[] = "zy12345678";

WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);

const char broker[]    = "iot-06z00h0081n2rwj.mqtt.iothub.aliyuncs.com";
int        port        = 1883;
const char inTopic[]   = "/sys/k28yf8EDzgr/esp8266_dev/thing/event/property/post";
const char outTopic[]  = "/sys/k28yf8EDzgr/esp8266_dev/thing/service/property/set";

const long interval = 10000;
unsigned long previousMillis = 0;
int count = 0;
String inputString = "";

void setup() {

  //初始化串口
  Serial.begin(9600);
  while (!Serial)
  {
    delay(500);
  }

  //定义引脚
  pinMode(4,OUTPUT);
  digitalWrite(4,LOW);

  //连接wifi
  Serial.print("Attempting to connect to: ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("You're connected to the wifi!");
  Serial.println(); 
  
  //连接mqtt
  mqttClient.setId("k28yf8EDzgr.esp8266_dev|securemode=2,signmethod=hmacsha256,timestamp=1736839130344|");
  mqttClient.setUsernamePassword("esp8266_dev&k28yf8EDzgr","3adb65a8cd38f37e3419760574d3abbaed767e505caaf6b56790814354f08572");

  Serial.print("Attempting to connect to the MQTT broker: ");
  Serial.println(broker);
  
  int connectAttempts = 0;
  const int maxConnectAttempts = 5;
  if (!mqttClient.connect(broker, port)) {
    Serial.print("MQTT connection failed! Error code = ");
    Serial.println(mqttClient.connectError());
    // 尝试重新连接
    while (connectAttempts < maxConnectAttempts) {
      delay(2000);
      Serial.println("Retrying MQTT connection...");
      if (mqttClient.connect(broker, port)) {
        Serial.println("Reconnected successfully!");
        break;
      }
      connectAttempts++;
    }
    if (connectAttempts >= maxConnectAttempts) {
      Serial.println("Failed to connect after multiple attempts.");
      while(1);
    }
  }
  else {
    Serial.println("You're connected to the MQTT broker!");
    Serial.println();
  }

  //MQTT 客户端的消息接收和订阅
  mqttClient.onMessage(onMqttMessage);

  Serial.print("Subscribing to topic: ");
  Serial.println(inTopic);
  Serial.println();
  int subscribeQos = 1;

  mqttClient.subscribe(inTopic, subscribeQos);

  Serial.print("Waiting for messages on topic: ");
  Serial.println(inTopic);
  Serial.println();
}

void loop() {
  mqttClient.poll();
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    String payload;
    DHT.read(DHT11_PIN);
    DynamicJsonDocument json_msg(512);
    DynamicJsonDocument json_data(512);
    json_data["temp"] = DHT.temperature;
    json_data["humi"] = DHT.humidity;
    json_msg["params"] = json_data;
    json_msg["version"] = "1.0.0";
    serializeJson(json_msg,payload);
    Serial.print("Sending message to topic: ");
    Serial.println(outTopic);
    Serial.println(payload);
    bool retained = false;
    int qos = 1;
    bool dup = false;
    mqttClient.beginMessage(outTopic, payload.length(), retained, qos, dup);
    mqttClient.print(payload);
    mqttClient.endMessage();
    Serial.println();
    count++;
  }
}

void onMqttMessage(int messageSize) {
  Serial.print("Received a message with topic '");
  Serial.print(mqttClient.messageTopic());
  Serial.print("', duplicate = ");
  Serial.print(mqttClient.messageDup() ? "true" : "false");
  Serial.print(", QoS = ");
  Serial.print(mqttClient.messageQoS());
  Serial.print(", retained = ");
  Serial.print(mqttClient.messageRetain() ? "true" : "false");
  Serial.print("', length ");
  Serial.print(messageSize);
  Serial.println(" bytes:");

  while (mqttClient.available()) {
    char inChar = (char)mqttClient.read();
    inputString += inChar;
   
    if(inputString.length()==messageSize) {
      DynamicJsonDocument json_msg(1024);
      DynamicJsonDocument json_item(1024);
      DynamicJsonDocument json_value(1024);
      deserializeJson(json_msg,inputString);

      String items = json_msg["items"];
      deserializeJson(json_item,items);
      String led = json_item["led"];
      deserializeJson(json_value,led);
      bool value = json_value["value"];
      if(value ==0) {//关
        Serial.println("off");
        digitalWrite(4,LOW);
      } 
      else {//开
        Serial.println("on");
        digitalWrite(4,HIGH);
      }

      inputString="";
    }
  }
  Serial.println();
}
